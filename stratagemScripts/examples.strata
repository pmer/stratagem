// Interesting examples

let apply: (Int -> Int) -> Int -> Int =
    fn(f: Int -> Int) {
        fn(n: Int) {
            f(n)
        }
    }
in let succ: Int -> Int = fn(n: Int) { n + 1 }
in apply(succ)(2) == 3;  // True

let fix =
    fn(f) {
        fn(x) {
            f(fn(y) {
                x(x)(y)
            })
        }(fn(x) {
            f(fn(y) {
                x(x)(y)
            })
        })
    }
in let fix_factorial: (Int -> Int) -> Int -> Int =
    fn(f: Int -> Int) {
        fn(n: Int) {
            if (n == 0) {
                1
            } else {
                n * f(n - 1)
            }
        }
    }
in let factorial: Int -> Int = fix(fix_factorial)
in factorial(4)  // 24
