// Interesting examples

let apply: (Int -> Int) -> Int -> Int =
    fn(f: Int -> Int): Int -> Int {
        fn(n: Int): Int {
            f(n)
        }
    }
in let plusOne: Int -> Int = fn(n: Int): Int { n + 1 }
in apply(plusOne)(2) == 3;

let fix =
    fn(f) {
        fn(x) {
            f(fn(y) {
                x(x)(y)
            })
        }(fn(x) {
            f(fn(y) {
                x(x)(y)
            })
        })
    }
in let fix_factorial: (Int -> Int) -> Int -> Int =
    fn(f: Int -> Int): Int -> Int {
        fn(n: Int): Int {
            if (n == 0) {
                1
            } else {
                n * f(n - 1)
            }
        }
    }
in fix(fix_factorial)(4)  // 24
